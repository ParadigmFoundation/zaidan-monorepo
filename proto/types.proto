syntax = "proto3";

option go_package = "grpc";

// Order book manager
message OrderBookEntry {
  double price = 1;
  double quantity = 2;
}

message OrderBookRequest {
  string exchange = 1;
  string symbol = 2;
}

message OrderBookUpdatesRequest {
  OrderBookRequest request = 1;
  uint32 limit = 2;
}

message OrderBookResponse {
  int64 last_update = 1;
  string exchange = 2;
  string symbol = 3;
  repeated OrderBookEntry asks = 4;
  repeated OrderBookEntry bids = 5;
}

// Maker 
message GetQuoteRequest {
    string quote_id = 1;
    string taker_asset = 2;
    string maker_asset = 3;
    string taker_size = 4;
    string maker_size = 5;
    string taker_address = 6;
}

message GetQuoteResponse {
    string quote_id = 1;
    string expiration = 2;
    string taker_asset = 3;
    string maker_asset = 4;
    string taker_size = 5;
    string maker_size = 6;
    string fee = 7;
}

message CheckQuoteRequest {
    string quote_id = 1;
} 

message CheckQuoteResponse {
    string quote_id = 1;
    bool is_valid = 2;
    uint32 status = 3;
}

message OrderStatusUpdateRequest {
    string quote_id = 1;
    uint32 status = 2;
}

message OrderStatusUpdateResponse {
    uint32 status = 1;
}

// Hot wallet
message Order {
    uint64 chain_id = 1;
    string exchange_address = 2;
    string maker_address = 3;
    string maker_asset_data = 4;
    string maker_fee_asset_data = 5;
    string maker_asset_amount = 6;
    string maker_fee = 7;
    string taker_address = 8;
    string taker_asset_data = 9;
    string taker_fee_asset_data = 10;
    string taker_asset_amount = 11;
    string taker_fee = 12;
    string sender_address = 13;
    string fee_recipient_address = 14;
    string expiration_time_seconds = 15;
    string salt = 16;
}

message SignedOrder {
    uint64 chain_id = 1;
    string exchange_address = 2;
    string maker_address = 3;
    string maker_asset_data = 4;
    string maker_fee_asset_data = 5;
    string maker_asset_amount = 6;
    string maker_fee = 7;
    string taker_address = 8;
    string taker_asset_data = 9;
    string taker_fee_asset_data = 10;
    string taker_asset_amount = 11;
    string taker_fee = 12;
    string sender_address = 13;
    string fee_recipient_address = 14;
    string expiration_time_seconds = 15;
    string salt = 16;
    string signature = 17;
}

message SignOrderRequest {
    Order order = 1;
}

message SignOrderResponse {
    SignedOrder signedOrder = 1;
}

message HashOrderRequest {
    Order order = 1;
}

message HashOrderResponse {
    bytes hash = 1;
}

message CreateOrderRequest {
    string taker_address = 1;
    string maker_asset_address = 2;
    string taker_asset_address = 3;
    string maker_asset_amount = 4;
    string taker_asset_amount = 5;
    string expiration_time_seconds = 6;
}

message CreateOrderResponse {
    SignedOrder order = 1;
    bytes hash = 2;
}

message WatchTransactionRequest {
    string quote_id = 1;
    string tx_hash = 2;
}

message WatchTransactionResponse {
    string quote_id = 1;
    string tx_hash = 2;
    bool is_pending = 3;
    bool is_watched = 4;
    uint32 tx_status = 5;
}

// Used to request an ETH or token balance at the current block
// If used for ETH balance, token_address is ignored
message GetBalanceRequest {
    string owner_address = 1;
    string token_address = 2;
}

// The response message for an Ether or ERC-20 token balance
// If the balance requested is Ether, the token_address will be empty
message GetBalanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string balance = 3;
}

message GetAllowanceRequest {
    string owner_address = 1;
    string token_address = 2;
    string spender_address = 3; // If empty, will check 0x ERC-20 proxy contract
}

message GetAllowanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string proxy_address = 3;
    string allowance = 4;
}

message SetAllowanceRequest {
    string token_address = 1;
    string owner_address = 2;
    string spender_address = 3; // If empty, will set for 0x ERC-20 proxy contract
    string allowance = 4;
}

message SetAllowanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string spender_address = 3;
    string allowance = 4;
}

message TransferRequest {
    string to_address = 1;
    string token_address = 2;
    string amount = 3;
}

message TransferResponse {
    string transaction_hash = 1;
    uint64 submitted_at = 2;
}

// Dealer
message Quote {
  string quote_id = 1; // A UUID (v4) that MUST correspond to this offer only
  string maker_asset_ticker = 2; //Shorthand ticker of the quote's maker asset (see quotes)
  string taker_asset_ticker = 3; // Shorthand ticker of the quote's taker asset (see quotes)
  string maker_asset_size = 4; // The quote's maker asset size provided by the dealer (see quotes)
  string quote_asset_size = 5; // The quote's taker asset size required by the client (see quotes)
  int64 expiration = 6; // The UNIX timestamp after which the quote will be rejected for settlement
  int64 server_time = 7; // The UNIX timestamp at which the server generated the quote. Helpful for clock synchronization
  string order_hash = 8; // The 0x-specific order hash, as defined in the v3 specification
  SignedOrder order = 9; // The dealer-signed 0x order that corresponds to this offer
  string fill_tx = 10; // The raw 0x fill transaction data for this quote that the taker may sign (see 6)
}

message Trade {
  string quote_id = 1; // The ID of the original quote that was filled in a trade
  string market_id = 2; // Implementation-specific ID corresponding to the correct market
  string order_hash = 3; // The 0x order hash of the order filled in a trade
  string transaction_hash = 4; // The Ethereum transaction hash (transaction ID) of fill
  string taker_address = 5; // The Ethereum address of the taker who requested and filled the quote
  int64 timestamp = 6; // The UNIX timestamp the fill was submitted (or mined) at
  string maker_asset_ticker = 7; // The ticker of the trade's maker asset
  string taker_asset_ticker = 8; // The ticker of the trade's taker asset
  string maker_asset_amount = 9; // The amount of the maker asset transacted in the trade
  string taker_asset_amount = 10; // The amount of the taker asset transacted in the trade
  SignedOrder order = 11; // The dealer-signed 0x order that corresponds to this offer
}

message Asset {
  string ticker = 1; // Short-form name of the ERC-20 asset. SHOULD match the value provided by the contract
  string name = 2; // Long-form name of the ERC-20 asset. SHOULD match the value provided by the contract
  uint32 decimals = 3; // The number of decimals used in the tokens user representation (see EIP-20)
  uint32 network_id = 4; // The EIP-155 network ID of the active Ethereum network (2)
  string address = 5; // ABIv2 encoded asset data (including address) as used in the 0x system
}

message TradeInfo {
  uint32 chain_id = 1; // The EIP-155 chain ID of the active Ethereum network (MUST match the EIP)
  string gas_limit = 2; // The gas limit that will be used in fillOrder transactions submitted by the dealer
  string gas_price = 3; // The gas price (in wei) that will be used in fillOrder transactions submitted by the dealer
}

message QuoteInfo {
  string min_size = 1; // The minimum supported trade size, in base units of a market's maker asset
  string max_size = 2; // The maximum supported trade size, in base units of a market's maker asset
}

message Market {
  string id = 1; // An implementation-specific market ID string. MUST be unique for each market
  string market_asset_ticker = 2; // The shorthand ticker of the markets maker asset (provided by the dealer)
  repeated string taker_asset_tickers = 3; // An array of shorthand tickers for which quotes are supported
  TradeInfo trade_info = 4; // Information about trade settlement and execution for this market (gas price, etc.)
  QuoteInfo quote_info = 5; // Information about quotes provided on this market (max/min size, etc.)
  map<string, string> metadata = 6; //
} 
