syntax = "proto3";

option go_package = "grpc";

// Order book manager
message OrderBookEntry {
  double price = 1;
  double quantity = 2;
}

message OrderBookRequest {
  string exchange = 1;
  string symbol = 2;
}

message OrderBookUpdatesRequest {
  OrderBookRequest request = 1;
  uint32 limit = 2;
}

message OrderBookResponse {
  int64 last_update = 1;
  string exchange = 2;
  string symbol = 3;
  repeated OrderBookEntry asks = 4;
  repeated OrderBookEntry bids = 5;
}

// Maker 
message GetQuoteRequest {
    string quote_id = 1;
    string taker_asset = 2;
    string maker_asset = 3;
    string taker_size = 4;
    string maker_size = 5;
    string taker_address = 6;
}

message GetQuoteResponse {
    string quote_id = 1;
    int64 expiration = 2;
    string taker_asset = 3;
    string maker_asset = 4;
    string taker_size = 5;
    string maker_size = 6;
    string fee = 7;
    int32 status = 8;
}

message CheckQuoteRequest {
    string quote_id = 1;
} 

message CheckQuoteResponse {
    string quote_id = 1;
    bool is_valid = 2;
    uint32 status = 3;
}

message OrderStatusUpdateRequest {
    string quote_id = 1;
    uint32 status = 2;
}

message OrderStatusUpdateResponse {
    uint32 status = 1;
}

// Hot wallet
message Order {
    uint64 chain_id = 1;
    string exchange_address = 2;
    string maker_address = 3;
    string maker_asset_data = 4;
    string maker_fee_asset_data = 5;
    string maker_asset_amount = 6;
    string maker_fee = 7;
    string taker_address = 8;
    string taker_asset_data = 9;
    string taker_fee_asset_data = 10;
    string taker_asset_amount = 11;
    string taker_fee = 12;
    string sender_address = 13;
    string fee_recipient_address = 14;
    string expiration_time_seconds = 15;
    string salt = 16;
}

message SignedOrder {
    uint64 chain_id = 1;
    string exchange_address = 2;
    string maker_address = 3;
    string maker_asset_data = 4;
    string maker_fee_asset_data = 5;
    string maker_asset_amount = 6;
    string maker_fee = 7;
    string taker_address = 8;
    string taker_asset_data = 9;
    string taker_fee_asset_data = 10;
    string taker_asset_amount = 11;
    string taker_fee = 12;
    string sender_address = 13;
    string fee_recipient_address = 14;
    string expiration_time_seconds = 15;
    string salt = 16;
    string signature = 17;
}

message CreateOrderRequest {
    string taker_address = 1;
    string maker_asset_address = 2;
    string taker_asset_address = 3;
    string maker_asset_amount = 4;
    string taker_asset_amount = 5;
    int64 expiration_time_seconds = 6;
}

message CreateOrderResponse {
    SignedOrder order = 1;
    ZeroExTransaction zero_ex_transaction = 2;
    string order_hash = 3;
    string zero_ex_transaction_hash = 4;
}

message WatchTransactionRequest {
    string quote_id = 1;
    string tx_hash = 2;
}

message WatchTransactionResponse {
    string quote_id = 1;
    string tx_hash = 2;
    bool is_pending = 3;
    bool is_watched = 4;
    uint32 tx_status = 5;
}

// Used to request an ETH or token balance at the current block
// If used for ETH balance, token_address is ignored
message GetBalanceRequest {
    string owner_address = 1;
    string token_address = 2;
}

// The response message for an Ether or ERC-20 token balance
// If the balance requested is Ether, the token_address will be empty
message GetBalanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string balance = 3;
}

message GetAllowanceRequest {
    string owner_address = 1;
    string token_address = 2;
}

message GetAllowanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string proxy_address = 3;
    string allowance = 4;
}

message SetAllowanceRequest {
    string token_address = 1;
    string allowance = 2; // If empty, will set max allowance (2^256 - 1)
}

message SetAllowanceResponse {
    string owner_address = 1;
    string token_address = 2;
    string proxy_address = 3;
    string allowance = 4;
    string transaction_hash = 5;
}

message TransferRequest {
    string to_address = 1;
    string token_address = 2;
    string amount = 3;
}

message TransferResponse {
    string transaction_hash = 1;
    int64 submitted_at = 2;
}

message SendTransactionRequest {
    string to_address = 1;        // the contract or address to send the transaction to
    string gas_price = 2;         // gas price for tx in wei (set automatically if null)
    uint64 gas_limit = 3;         // gas limit for tx in gas units (set automatically if null)
    string value = 4;             // amount of ETH to include in TX (set to 0 if null)
    bytes data = 5;               // contract code, call data, or TX payload 
}

message SendTransactionResponse {
   string transaction_hash = 1;  // submitted transaction hash
   int64 sent_at = 2;            // UNIX timestamp at which transaction added to mempool
}

message ZeroExTransaction {
  string salt = 1;
  int64 expiration_time_seconds = 2;
  string gas_price = 3;
  string signer_address = 4;
  string data = 5;
}

message ExecuteZeroExTransactionRequest {
    string salt = 1;
    string expiration_time_seconds = 2;
    string gas_price = 3;
    string signer_address = 4;
    bytes data = 5;
    bytes signature = 6;
}

message ExecuteZeroExTransactionResponse {
    string transaction_hash = 1;
    int64 submitted_at = 2;
}

message ValidateOrderRequest {
  SignedOrder order = 1;
  string taker_asset_amount = 2;
}

message ValidateOrderResponse {
  bool valid = 1;
  string info = 2;
}

// Dealer (public API types)
message Quote {
  string quote_id = 1; // A UUID (v4) that MUST correspond to this offer only
  string maker_asset_address = 2; // Address of the quote's maker asset (see quotes)
  string taker_asset_address = 3; // Address of the quote's taker asset (see quotes)
  string maker_asset_size = 4; // The quote's maker asset size provided by the dealer (see quotes)
  string taker_asset_size = 5; // The quote's taker asset size required by the client (see quotes)
  int64 expiration = 6; // The UNIX timestamp after which the quote will be rejected for settlement
  int64 server_time = 7; // The UNIX timestamp at which the server generated the quote. Helpful for clock synchronization
  SignedOrder order = 8; // The dealer-signed 0x order that corresponds to this offer
  string order_hash = 9; // The 0x-specific order hash, as defined in the v3 specification
  ZeroExTransaction zero_ex_transaction = 10; // The raw 0x fill transaction data for this quote that the taker may sign (see 6)
  string zero_ex_transaction_hash = 11;
}

message TradeInfo {
  uint32 chain_id = 1; // The EIP-155 chain ID of the active Ethereum network (MUST match the EIP)
  string gas_limit = 2; // The gas limit that will be used in fillOrder transactions submitted by the dealer
  string gas_price = 3; // The gas price (in wei) that will be used in fillOrder transactions submitted by the dealer
}

message QuoteInfo {
  string min_size = 1; // The minimum supported trade size, in base units of a market's maker asset
  string max_size = 2; // The maximum supported trade size, in base units of a market's maker asset
}

message Market {
  string maker_asset_address = 1; // The Ethereum address of the markets maker asset (provided by the dealer).
  repeated string taker_asset_addresses = 2; // An array of asset Ethereum addresses for which quotes are supported.
  TradeInfo trade_info = 3; // Information about trade settlement and execution for this market (gas price, etc.)
  QuoteInfo quote_info = 4; // Information about quotes provided on this market (max/min size, etc.)
  map<string, string> metadata = 5; //
} 

// Exchange Manager
message ExchangeOrder {
  string id = 1;
  string price = 2;
  string symbol = 3;
  string amount = 4;
  enum Side {
    BUY = 0;
    SELL = 1;
  }
  Side side = 5;
}

message ExchangeOrderStatus {
  int64 timestamp = 1;
  string filled = 2;
  bytes info = 3; // the original unparsed order structure as is
}

message ExchangeCreateOrderRequest {
  string exchange = 1;
  ExchangeOrder order = 2;
}

message ExchangeOrderRequest {
  string exchange = 1;
  string id = 2;
}

message ExchangeOrderResponse {
  ExchangeOrder order = 1;
  ExchangeOrderStatus status = 2;
}

message ExchangeOrderArrayResponse {
  repeated ExchangeOrderResponse array = 1;
}
