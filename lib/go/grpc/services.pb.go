// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x35, 0xc4, 0x3a, 0x76, 0x4a, 0x69, 0xeb, 0x7d, 0x95, 0x16, 0xc1, 0xb8, 0x01, 0x17,
	0x15, 0x26, 0x31, 0x40, 0xa0, 0xb5, 0x54, 0x9d, 0x90, 0x26, 0xc4, 0x32, 0x36, 0x69, 0x42, 0x42,
	0x5e, 0x7a, 0x96, 0x56, 0x0d, 0x71, 0xe6, 0x38, 0xac, 0xfd, 0xc9, 0x5f, 0x2e, 0x81, 0xab, 0x45,
	0x71, 0xec, 0x7c, 0xf5, 0x03, 0xf6, 0xcf, 0xe7, 0x3d, 0x7e, 0xde, 0xe3, 0x38, 0xaf, 0x0c, 0x8f,
	0x02, 0x14, 0x3f, 0xc7, 0x36, 0x06, 0xd4, 0x17, 0x5c, 0xf2, 0x66, 0xcb, 0xe1, 0xdc, 0x71, 0xb1,
	0xad, 0xaa, 0xab, 0xf0, 0xba, 0x8d, 0x3f, 0x7c, 0x39, 0xd3, 0xcd, 0xa7, 0xc5, 0xe6, 0xad, 0x60,
	0xbe, 0x8f, 0xc2, 0xc0, 0x65, 0x39, 0xf3, 0x8d, 0x53, 0xe7, 0xd7, 0x1a, 0xd4, 0x3e, 0x8b, 0x21,
	0x8a, 0x2e, 0xe7, 0x93, 0x13, 0xe6, 0x31, 0x07, 0x05, 0xe9, 0xc0, 0x66, 0xa2, 0x91, 0x3a, 0x4d,
	0xd6, 0xa7, 0x78, 0x13, 0x62, 0x20, 0x9b, 0x24, 0x2b, 0x05, 0x3e, 0xf7, 0x02, 0x24, 0x87, 0xb0,
	0xf1, 0xd5, 0x1f, 0x32, 0x89, 0x01, 0x69, 0xa4, 0x6d, 0x2d, 0xad, 0x00, 0x5f, 0xac, 0x75, 0x38,
	0xac, 0x9f, 0xb0, 0x09, 0x0a, 0xd2, 0x86, 0x07, 0x03, 0x94, 0x5f, 0x42, 0x2e, 0x91, 0xd4, 0xa8,
	0x59, 0x1a, 0xb8, 0x9e, 0x51, 0xf4, 0xd0, 0x03, 0x80, 0xde, 0x08, 0xed, 0x49, 0x8c, 0x10, 0x9a,
	0x16, 0x06, 0xda, 0xca, 0x69, 0x31, 0xd6, 0xb9, 0x81, 0xfa, 0x99, 0x60, 0x5e, 0xc0, 0x6c, 0x39,
	0xe6, 0x9e, 0x25, 0x99, 0x0c, 0x03, 0xf2, 0x0d, 0xf6, 0xe6, 0xc4, 0xf8, 0xf8, 0xe4, 0x19, 0x5d,
	0xd2, 0x31, 0x53, 0xf6, 0x97, 0x6f, 0xd0, 0x23, 0x7f, 0xaf, 0xc3, 0xe6, 0x31, 0x97, 0x17, 0xcc,
	0x75, 0x51, 0x92, 0xd7, 0x50, 0xee, 0x09, 0x64, 0x12, 0xd5, 0x75, 0x90, 0x2d, 0x9a, 0xa9, 0x8c,
	0xe7, 0x76, 0x5e, 0xd4, 0x5f, 0xfc, 0x1e, 0x2a, 0xe7, 0xcc, 0x1d, 0x0f, 0x13, 0x76, 0x87, 0xe6,
	0x6a, 0x43, 0xef, 0x16, 0x65, 0xcd, 0xbf, 0x85, 0x87, 0x03, 0x94, 0x47, 0xae, 0xcb, 0x6f, 0x99,
	0x67, 0x23, 0xd9, 0xa6, 0xd9, 0xd2, 0xd0, 0x3b, 0x05, 0x35, 0x85, 0xad, 0x3c, 0x6c, 0x2d, 0x84,
	0xad, 0x45, 0xf0, 0x1b, 0xa8, 0x0e, 0x50, 0x9e, 0xf1, 0x09, 0x7a, 0x5d, 0xe6, 0x2a, 0x9e, 0x44,
	0x63, 0x74, 0x91, 0xfe, 0xb0, 0xac, 0x96, 0x63, 0xfb, 0x72, 0x84, 0xe2, 0xce, 0xec, 0x2b, 0xa8,
	0xa8, 0x9f, 0x73, 0x8d, 0x42, 0x19, 0x90, 0x1a, 0x35, 0x75, 0x9a, 0xac, 0x54, 0x99, 0xa7, 0xd4,
	0x91, 0xff, 0x8f, 0xfa, 0x08, 0x55, 0x0b, 0xbd, 0x61, 0x26, 0x0c, 0x64, 0x8f, 0x16, 0x14, 0x83,
	0x37, 0xe6, 0x1b, 0xda, 0xe5, 0x3b, 0x34, 0xfa, 0x53, 0xb4, 0x43, 0x89, 0x97, 0x28, 0x78, 0x7f,
	0x9a, 0xb5, 0xdb, 0xa7, 0xcb, 0x5a, 0xc6, 0xf7, 0xf9, 0x8a, 0x1d, 0x3a, 0x8c, 0xa7, 0xb0, 0x71,
	0xc1, 0xa4, 0x1d, 0x5d, 0xc6, 0x00, 0x6a, 0x6a, 0x99, 0x9d, 0xd1, 0xa0, 0x45, 0xc9, 0x78, 0x3f,
	0x5e, 0xd0, 0xd1, 0x9e, 0x7f, 0xee, 0x41, 0xb5, 0x3f, 0xb5, 0x47, 0xcc, 0x73, 0xd0, 0xbc, 0x23,
	0xdd, 0x7c, 0xcc, 0x5b, 0xd4, 0x6c, 0x58, 0x10, 0xf7, 0xdd, 0xa4, 0x99, 0x0f, 0xec, 0xa1, 0x7a,
	0x13, 0x4c, 0xd6, 0x0b, 0x7b, 0x56, 0xa3, 0x9f, 0xa0, 0x12, 0xa1, 0x3e, 0x7a, 0x4a, 0x0f, 0xc8,
	0x13, 0x1a, 0x3f, 0x8d, 0xd4, 0x3c, 0x8d, 0xd4, 0x92, 0x62, 0xec, 0x39, 0xe7, 0xcc, 0x0d, 0xb1,
	0xd9, 0xca, 0xdb, 0x1c, 0x09, 0xc1, 0x66, 0x89, 0xd7, 0x3b, 0x28, 0xf7, 0xa2, 0x58, 0xb9, 0xff,
	0x38, 0x49, 0x71, 0x40, 0x3f, 0x7a, 0x98, 0x3b, 0x1f, 0xa0, 0x74, 0x8c, 0xc3, 0xe8, 0x4a, 0x0e,
	0x00, 0xd4, 0x2a, 0xb6, 0x21, 0x34, 0x2d, 0xd2, 0x10, 0x67, 0xb5, 0x78, 0x7c, 0xb7, 0x74, 0x79,
	0xdf, 0x11, 0xbe, 0x7d, 0x55, 0x52, 0xc6, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x21,
	0x27, 0xcd, 0x11, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderBookManagerClient is the client API for OrderBookManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderBookManagerClient interface {
	OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	Updates(ctx context.Context, in *OrderBookUpdatesRequest, opts ...grpc.CallOption) (OrderBookManager_UpdatesClient, error)
}

type orderBookManagerClient struct {
	cc *grpc.ClientConn
}

func NewOrderBookManagerClient(cc *grpc.ClientConn) OrderBookManagerClient {
	return &orderBookManagerClient{cc}
}

func (c *orderBookManagerClient) OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, "/OrderBookManager/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookManagerClient) Updates(ctx context.Context, in *OrderBookUpdatesRequest, opts ...grpc.CallOption) (OrderBookManager_UpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderBookManager_serviceDesc.Streams[0], "/OrderBookManager/Updates", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderBookManagerUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderBookManager_UpdatesClient interface {
	Recv() (*OrderBookResponse, error)
	grpc.ClientStream
}

type orderBookManagerUpdatesClient struct {
	grpc.ClientStream
}

func (x *orderBookManagerUpdatesClient) Recv() (*OrderBookResponse, error) {
	m := new(OrderBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderBookManagerServer is the server API for OrderBookManager service.
type OrderBookManagerServer interface {
	OrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error)
	Updates(*OrderBookUpdatesRequest, OrderBookManager_UpdatesServer) error
}

// UnimplementedOrderBookManagerServer can be embedded to have forward compatible implementations.
type UnimplementedOrderBookManagerServer struct {
}

func (*UnimplementedOrderBookManagerServer) OrderBook(ctx context.Context, req *OrderBookRequest) (*OrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (*UnimplementedOrderBookManagerServer) Updates(req *OrderBookUpdatesRequest, srv OrderBookManager_UpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Updates not implemented")
}

func RegisterOrderBookManagerServer(s *grpc.Server, srv OrderBookManagerServer) {
	s.RegisterService(&_OrderBookManager_serviceDesc, srv)
}

func _OrderBookManager_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookManagerServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderBookManager/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookManagerServer).OrderBook(ctx, req.(*OrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookManager_Updates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderBookUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderBookManagerServer).Updates(m, &orderBookManagerUpdatesServer{stream})
}

type OrderBookManager_UpdatesServer interface {
	Send(*OrderBookResponse) error
	grpc.ServerStream
}

type orderBookManagerUpdatesServer struct {
	grpc.ServerStream
}

func (x *orderBookManagerUpdatesServer) Send(m *OrderBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OrderBookManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrderBookManager",
	HandlerType: (*OrderBookManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderBook",
			Handler:    _OrderBookManager_OrderBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updates",
			Handler:       _OrderBookManager_Updates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// MakerClient is the client API for Maker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MakerClient interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	CheckQuote(ctx context.Context, in *CheckQuoteRequest, opts ...grpc.CallOption) (*CheckQuoteResponse, error)
}

type makerClient struct {
	cc *grpc.ClientConn
}

func NewMakerClient(cc *grpc.ClientConn) MakerClient {
	return &makerClient{cc}
}

func (c *makerClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, "/Maker/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makerClient) CheckQuote(ctx context.Context, in *CheckQuoteRequest, opts ...grpc.CallOption) (*CheckQuoteResponse, error) {
	out := new(CheckQuoteResponse)
	err := c.cc.Invoke(ctx, "/Maker/CheckQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MakerServer is the server API for Maker service.
type MakerServer interface {
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	CheckQuote(context.Context, *CheckQuoteRequest) (*CheckQuoteResponse, error)
}

// UnimplementedMakerServer can be embedded to have forward compatible implementations.
type UnimplementedMakerServer struct {
}

func (*UnimplementedMakerServer) GetQuote(ctx context.Context, req *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (*UnimplementedMakerServer) CheckQuote(ctx context.Context, req *CheckQuoteRequest) (*CheckQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuote not implemented")
}

func RegisterMakerServer(s *grpc.Server, srv MakerServer) {
	s.RegisterService(&_Maker_serviceDesc, srv)
}

func _Maker_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakerServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maker/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakerServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maker_CheckQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakerServer).CheckQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maker/CheckQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakerServer).CheckQuote(ctx, req.(*CheckQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Maker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Maker",
	HandlerType: (*MakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuote",
			Handler:    _Maker_GetQuote_Handler,
		},
		{
			MethodName: "CheckQuote",
			Handler:    _Maker_CheckQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// TransactionStatusClient is the client API for TransactionStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionStatusClient interface {
	TransactionStatusUpdate(ctx context.Context, in *TransactionStatusUpdateRequest, opts ...grpc.CallOption) (*TransactionStatusUpdateResponse, error)
}

type transactionStatusClient struct {
	cc *grpc.ClientConn
}

func NewTransactionStatusClient(cc *grpc.ClientConn) TransactionStatusClient {
	return &transactionStatusClient{cc}
}

func (c *transactionStatusClient) TransactionStatusUpdate(ctx context.Context, in *TransactionStatusUpdateRequest, opts ...grpc.CallOption) (*TransactionStatusUpdateResponse, error) {
	out := new(TransactionStatusUpdateResponse)
	err := c.cc.Invoke(ctx, "/TransactionStatus/TransactionStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatusServer is the server API for TransactionStatus service.
type TransactionStatusServer interface {
	TransactionStatusUpdate(context.Context, *TransactionStatusUpdateRequest) (*TransactionStatusUpdateResponse, error)
}

// UnimplementedTransactionStatusServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionStatusServer struct {
}

func (*UnimplementedTransactionStatusServer) TransactionStatusUpdate(ctx context.Context, req *TransactionStatusUpdateRequest) (*TransactionStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionStatusUpdate not implemented")
}

func RegisterTransactionStatusServer(s *grpc.Server, srv TransactionStatusServer) {
	s.RegisterService(&_TransactionStatus_serviceDesc, srv)
}

func _TransactionStatus_TransactionStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServer).TransactionStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransactionStatus/TransactionStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServer).TransactionStatusUpdate(ctx, req.(*TransactionStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TransactionStatus",
	HandlerType: (*TransactionStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionStatusUpdate",
			Handler:    _TransactionStatus_TransactionStatusUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// HotWalletClient is the client API for HotWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotWalletClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	ValidateOrder(ctx context.Context, in *ValidateOrderRequest, opts ...grpc.CallOption) (*ValidateOrderResponse, error)
	GetAllowance(ctx context.Context, in *GetAllowanceRequest, opts ...grpc.CallOption) (*GetAllowanceResponse, error)
	SetAllowance(ctx context.Context, in *SetAllowanceRequest, opts ...grpc.CallOption) (*SetAllowanceResponse, error)
	GetTokenBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetEtherBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	TransferEther(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	TransferToken(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	ExecuteZeroExTransaction(ctx context.Context, in *ExecuteZeroExTransactionRequest, opts ...grpc.CallOption) (*ExecuteZeroExTransactionResponse, error)
}

type hotWalletClient struct {
	cc *grpc.ClientConn
}

func NewHotWalletClient(cc *grpc.ClientConn) HotWalletClient {
	return &hotWalletClient{cc}
}

func (c *hotWalletClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) ValidateOrder(ctx context.Context, in *ValidateOrderRequest, opts ...grpc.CallOption) (*ValidateOrderResponse, error) {
	out := new(ValidateOrderResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/ValidateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) GetAllowance(ctx context.Context, in *GetAllowanceRequest, opts ...grpc.CallOption) (*GetAllowanceResponse, error) {
	out := new(GetAllowanceResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/GetAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) SetAllowance(ctx context.Context, in *SetAllowanceRequest, opts ...grpc.CallOption) (*SetAllowanceResponse, error) {
	out := new(SetAllowanceResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/SetAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) GetTokenBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/GetTokenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) GetEtherBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/GetEtherBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) TransferEther(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/TransferEther", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) TransferToken(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/TransferToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotWalletClient) ExecuteZeroExTransaction(ctx context.Context, in *ExecuteZeroExTransactionRequest, opts ...grpc.CallOption) (*ExecuteZeroExTransactionResponse, error) {
	out := new(ExecuteZeroExTransactionResponse)
	err := c.cc.Invoke(ctx, "/HotWallet/ExecuteZeroExTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotWalletServer is the server API for HotWallet service.
type HotWalletServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	ValidateOrder(context.Context, *ValidateOrderRequest) (*ValidateOrderResponse, error)
	GetAllowance(context.Context, *GetAllowanceRequest) (*GetAllowanceResponse, error)
	SetAllowance(context.Context, *SetAllowanceRequest) (*SetAllowanceResponse, error)
	GetTokenBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	GetEtherBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	TransferEther(context.Context, *TransferRequest) (*TransferResponse, error)
	TransferToken(context.Context, *TransferRequest) (*TransferResponse, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	ExecuteZeroExTransaction(context.Context, *ExecuteZeroExTransactionRequest) (*ExecuteZeroExTransactionResponse, error)
}

// UnimplementedHotWalletServer can be embedded to have forward compatible implementations.
type UnimplementedHotWalletServer struct {
}

func (*UnimplementedHotWalletServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedHotWalletServer) ValidateOrder(ctx context.Context, req *ValidateOrderRequest) (*ValidateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrder not implemented")
}
func (*UnimplementedHotWalletServer) GetAllowance(ctx context.Context, req *GetAllowanceRequest) (*GetAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowance not implemented")
}
func (*UnimplementedHotWalletServer) SetAllowance(ctx context.Context, req *SetAllowanceRequest) (*SetAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowance not implemented")
}
func (*UnimplementedHotWalletServer) GetTokenBalance(ctx context.Context, req *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBalance not implemented")
}
func (*UnimplementedHotWalletServer) GetEtherBalance(ctx context.Context, req *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEtherBalance not implemented")
}
func (*UnimplementedHotWalletServer) TransferEther(ctx context.Context, req *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEther not implemented")
}
func (*UnimplementedHotWalletServer) TransferToken(ctx context.Context, req *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToken not implemented")
}
func (*UnimplementedHotWalletServer) SendTransaction(ctx context.Context, req *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedHotWalletServer) ExecuteZeroExTransaction(ctx context.Context, req *ExecuteZeroExTransactionRequest) (*ExecuteZeroExTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteZeroExTransaction not implemented")
}

func RegisterHotWalletServer(s *grpc.Server, srv HotWalletServer) {
	s.RegisterService(&_HotWallet_serviceDesc, srv)
}

func _HotWallet_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_ValidateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).ValidateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/ValidateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).ValidateOrder(ctx, req.(*ValidateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_GetAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).GetAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/GetAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).GetAllowance(ctx, req.(*GetAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_SetAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).SetAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/SetAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).SetAllowance(ctx, req.(*SetAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/GetTokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).GetTokenBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_GetEtherBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).GetEtherBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/GetEtherBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).GetEtherBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_TransferEther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).TransferEther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/TransferEther",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).TransferEther(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_TransferToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).TransferToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/TransferToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).TransferToken(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotWallet_ExecuteZeroExTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteZeroExTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotWalletServer).ExecuteZeroExTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotWallet/ExecuteZeroExTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotWalletServer).ExecuteZeroExTransaction(ctx, req.(*ExecuteZeroExTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotWallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HotWallet",
	HandlerType: (*HotWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _HotWallet_CreateOrder_Handler,
		},
		{
			MethodName: "ValidateOrder",
			Handler:    _HotWallet_ValidateOrder_Handler,
		},
		{
			MethodName: "GetAllowance",
			Handler:    _HotWallet_GetAllowance_Handler,
		},
		{
			MethodName: "SetAllowance",
			Handler:    _HotWallet_SetAllowance_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _HotWallet_GetTokenBalance_Handler,
		},
		{
			MethodName: "GetEtherBalance",
			Handler:    _HotWallet_GetEtherBalance_Handler,
		},
		{
			MethodName: "TransferEther",
			Handler:    _HotWallet_TransferEther_Handler,
		},
		{
			MethodName: "TransferToken",
			Handler:    _HotWallet_TransferToken_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _HotWallet_SendTransaction_Handler,
		},
		{
			MethodName: "ExecuteZeroExTransaction",
			Handler:    _HotWallet_ExecuteZeroExTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// WatcherClient is the client API for Watcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatcherClient interface {
	WatchTransaction(ctx context.Context, in *WatchTransactionRequest, opts ...grpc.CallOption) (*WatchTransactionResponse, error)
}

type watcherClient struct {
	cc *grpc.ClientConn
}

func NewWatcherClient(cc *grpc.ClientConn) WatcherClient {
	return &watcherClient{cc}
}

func (c *watcherClient) WatchTransaction(ctx context.Context, in *WatchTransactionRequest, opts ...grpc.CallOption) (*WatchTransactionResponse, error) {
	out := new(WatchTransactionResponse)
	err := c.cc.Invoke(ctx, "/Watcher/WatchTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatcherServer is the server API for Watcher service.
type WatcherServer interface {
	WatchTransaction(context.Context, *WatchTransactionRequest) (*WatchTransactionResponse, error)
}

// UnimplementedWatcherServer can be embedded to have forward compatible implementations.
type UnimplementedWatcherServer struct {
}

func (*UnimplementedWatcherServer) WatchTransaction(ctx context.Context, req *WatchTransactionRequest) (*WatchTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchTransaction not implemented")
}

func RegisterWatcherServer(s *grpc.Server, srv WatcherServer) {
	s.RegisterService(&_Watcher_serviceDesc, srv)
}

func _Watcher_WatchTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherServer).WatchTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Watcher/WatchTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherServer).WatchTransaction(ctx, req.(*WatchTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Watcher",
	HandlerType: (*WatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchTransaction",
			Handler:    _Watcher_WatchTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// ExchangeManagerClient is the client API for ExchangeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeManagerClient interface {
	CreateOrder(ctx context.Context, in *ExchangeCreateOrderRequest, opts ...grpc.CallOption) (*ExchangeOrderResponse, error)
	GetOrder(ctx context.Context, in *ExchangeOrderRequest, opts ...grpc.CallOption) (*ExchangeOrderResponse, error)
	GetOpenOrders(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ExchangeOrderArrayResponse, error)
	CancelOrder(ctx context.Context, in *ExchangeOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type exchangeManagerClient struct {
	cc *grpc.ClientConn
}

func NewExchangeManagerClient(cc *grpc.ClientConn) ExchangeManagerClient {
	return &exchangeManagerClient{cc}
}

func (c *exchangeManagerClient) CreateOrder(ctx context.Context, in *ExchangeCreateOrderRequest, opts ...grpc.CallOption) (*ExchangeOrderResponse, error) {
	out := new(ExchangeOrderResponse)
	err := c.cc.Invoke(ctx, "/ExchangeManager/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeManagerClient) GetOrder(ctx context.Context, in *ExchangeOrderRequest, opts ...grpc.CallOption) (*ExchangeOrderResponse, error) {
	out := new(ExchangeOrderResponse)
	err := c.cc.Invoke(ctx, "/ExchangeManager/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeManagerClient) GetOpenOrders(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ExchangeOrderArrayResponse, error) {
	out := new(ExchangeOrderArrayResponse)
	err := c.cc.Invoke(ctx, "/ExchangeManager/GetOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeManagerClient) CancelOrder(ctx context.Context, in *ExchangeOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ExchangeManager/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeManagerServer is the server API for ExchangeManager service.
type ExchangeManagerServer interface {
	CreateOrder(context.Context, *ExchangeCreateOrderRequest) (*ExchangeOrderResponse, error)
	GetOrder(context.Context, *ExchangeOrderRequest) (*ExchangeOrderResponse, error)
	GetOpenOrders(context.Context, *wrappers.StringValue) (*ExchangeOrderArrayResponse, error)
	CancelOrder(context.Context, *ExchangeOrderRequest) (*empty.Empty, error)
}

// UnimplementedExchangeManagerServer can be embedded to have forward compatible implementations.
type UnimplementedExchangeManagerServer struct {
}

func (*UnimplementedExchangeManagerServer) CreateOrder(ctx context.Context, req *ExchangeCreateOrderRequest) (*ExchangeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedExchangeManagerServer) GetOrder(ctx context.Context, req *ExchangeOrderRequest) (*ExchangeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedExchangeManagerServer) GetOpenOrders(ctx context.Context, req *wrappers.StringValue) (*ExchangeOrderArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrders not implemented")
}
func (*UnimplementedExchangeManagerServer) CancelOrder(ctx context.Context, req *ExchangeOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}

func RegisterExchangeManagerServer(s *grpc.Server, srv ExchangeManagerServer) {
	s.RegisterService(&_ExchangeManager_serviceDesc, srv)
}

func _ExchangeManager_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeManagerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExchangeManager/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeManagerServer).CreateOrder(ctx, req.(*ExchangeCreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeManager_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeManagerServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExchangeManager/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeManagerServer).GetOrder(ctx, req.(*ExchangeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeManager_GetOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeManagerServer).GetOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExchangeManager/GetOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeManagerServer).GetOpenOrders(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeManager_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeManagerServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExchangeManager/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeManagerServer).CancelOrder(ctx, req.(*ExchangeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExchangeManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExchangeManager",
	HandlerType: (*ExchangeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _ExchangeManager_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ExchangeManager_GetOrder_Handler,
		},
		{
			MethodName: "GetOpenOrders",
			Handler:    _ExchangeManager_GetOpenOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _ExchangeManager_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// HedgerClient is the client API for Hedger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HedgerClient interface {
	HedgeOrder(ctx context.Context, in *HedgeOrderRequest, opts ...grpc.CallOption) (*HedgeOrderResponse, error)
}

type hedgerClient struct {
	cc *grpc.ClientConn
}

func NewHedgerClient(cc *grpc.ClientConn) HedgerClient {
	return &hedgerClient{cc}
}

func (c *hedgerClient) HedgeOrder(ctx context.Context, in *HedgeOrderRequest, opts ...grpc.CallOption) (*HedgeOrderResponse, error) {
	out := new(HedgeOrderResponse)
	err := c.cc.Invoke(ctx, "/Hedger/HedgeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HedgerServer is the server API for Hedger service.
type HedgerServer interface {
	HedgeOrder(context.Context, *HedgeOrderRequest) (*HedgeOrderResponse, error)
}

// UnimplementedHedgerServer can be embedded to have forward compatible implementations.
type UnimplementedHedgerServer struct {
}

func (*UnimplementedHedgerServer) HedgeOrder(ctx context.Context, req *HedgeOrderRequest) (*HedgeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HedgeOrder not implemented")
}

func RegisterHedgerServer(s *grpc.Server, srv HedgerServer) {
	s.RegisterService(&_Hedger_serviceDesc, srv)
}

func _Hedger_HedgeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HedgeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HedgerServer).HedgeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hedger/HedgeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HedgerServer).HedgeOrder(ctx, req.(*HedgeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hedger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hedger",
	HandlerType: (*HedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HedgeOrder",
			Handler:    _Hedger_HedgeOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
